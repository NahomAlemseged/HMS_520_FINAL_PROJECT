}
else{
return("Drop null values")
}
return(sqrt((sum(x^2))/length(x)))
}
}
rmse = function(x,na_rm){
if (is.numeric(x) != TRUE){
return("x must be a numeric vector")
}
else{
if (na_rm == TRUE){
x <- c(na.omit(x))
}
else{
return("Drop null values")
}
return(sqrt((sum(x^2))/length(x)))
}
}
rmse(c(1,2,3),TRUE)
rmse(c(1,2,3),FALSE)
rmse(c(1,2,3,"a"),FALSE)
rmse(c(1,2,3,NA),FALSE)
rmse(c(1,2,3,NA),TRUE)
rmse(c(1,2,3),FALSE)
rmse = function(x,na_rm){
if (is.numeric(x) != TRUE){
return("x must be a numeric vector")
}
else{
if (na_rm == TRUE){
x <- c(na.omit(x))
}
else{
return("Drop null values")
}
return(sqrt((sum(x^2))/length(x)))
}
}
?&
2&3
A <- c(1,2,3,NA)
is.na(A)
any(is.na(A))
B <- c(na.omit(A))
B
any(is.na(B))
rmse = function(x,na_rm){
if ((is.numeric(x) != TRUE) & (any(is.na(x)))){
return("x must be a numeric vector")
}
else{
if (na_rm == TRUE){
x <- c(na.omit(x))
}
else{
return("Drop null values")
}
return(sqrt((sum(x^2))/length(x)))
}
}
rmse(c(1,2,3,NA), TRUE)
rmse(c(1,2,3,NA), FALSE)
abs(-2)
?substr
substr(length("abse"))
length("abs")
length(substr("asd"))
length(string("asd"))
str_length("asd")
X <- 2
Y <- 3
max(X,Y)
Z <- c(X,Y)
Z
z(1)
z[1]
Z[1]
max(Z)
?arrayInd
Z
which(max(Z))
?arrayInd
arrayInd(max(Z))
index
?index
which.max(Z)
max(Z)
Z
which.min(Z)
str_length("asd")
?invisible
which.min(Z)
paste("wewew",which.max(Z))
describe_difference = function(X,Y){
x_len <- str_length(X)
y_len <- str_length(Y)
N <- abs(X_len - y_len)
Z <- c(x_len, y_len)
if (x_len == y_len){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference("asdsda","asd")
X <- "asd"
str_length(X)
describe_difference = function(X,Y){
x_len <- str_length(X)
y_len <- str_length(Y)
N <- abs(X_len - y_len)
Z <- c(x_len, y_len)
if (x_len == y_len){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference("asasa","as")
x_len <- str_length("asd")
x_len
describe_difference = function(X,Y){
x_len <- str_length(X)
y_len <- str_length(Y)
N <- abs(X_len - y_len)
Z <- c(x_len, y_len)
if (x_len == y_len){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference("asdasd","as")
X <- asdasd
describe_difference = function(X,Y){
# x_len <- str_length(X)
# y_len <- str_length(Y)
N <- abs(str_length(X) - str_length(Y))
Z <- c(x_len, y_len)
if (x_len == y_len){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference('asd','asdsds')
describe_difference = function(X,Y){
# x_len <- str_length(X)
# y_len <- str_length(Y)
N <- abs(str_length(X) - str_length(Y))
Z <- c(str_length(X), str_length(Y))
if (str_length(X) == str_length){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference = function(X,Y){
# x_len <- str_length(X)
# y_len <- str_length(Y)
N <- abs(str_length(X) - str_length(Y))
Z <- c(str_length(X), str_length(Y))
if (str_length(X) == str_length){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference("asds","as")
describe_difference = function(X,Y){
x_len <- str_length(X)
y_len <- str_length(Y)
N <- abs(str_length(X) - str_length(Y))
Z <- c(str_length(X), str_length(Y))
if (str_length(X) == str_length){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference("asd",'dsdsdsd'')
describe_difference = function(X,Y){
x_len <- str_length(X)
y_len <- str_length(Y)
N <- abs(str_length(X) - str_length(Y))
Z <- c(str_length(X), str_length(Y))
if (str_length(X) == str_length){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
""
)>
''
describe_difference = function(X,Y){
x_len <- str_length(X)
y_len <- str_length(Y)
N <- abs(str_length(X) - str_length(Y))
Z <- c(str_length(X), str_length(Y))
if (str_length(X) == str_length){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference = function(X,Y){
x_len <- str_length(X)
y_len <- str_length(Y)
N <- abs(str_length(X) - str_length(Y))
Z <- c(str_length(X), str_length(Y))
if (str_length(X) == str_length){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference("asd","a")
str_length("asdsd")
describe_difference = function(X,Y){
x_len <- str_length(X)
y_len <- str_length(Y)
N <- abs(str_length(X) - str_length(Y))
Z <- c(str_length(X), str_length(Y))
if ((str_length(X)) == (str_length)){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference("asdsds","as")
describe_difference = function(X,Y){
x_len <- str_length(X)
y_len <- str_length(Y)
N <- abs(str_length(X) - str_length(Y))
Z <- c(str_length(X), str_length(Y))
if (x_len == y_len){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference("asdssd","as")
describe_difference("trail","?")
describe_difference("trail__","?")
library(dplyr)
# R program for String Creation
is_string = function(A){
if (is.character(A) == TRUE){
return("True")
}
else{
return("False")
}
}
is_string(31)
is_string("31")
library(dplyr)
# R program for String Creation
is_string = function(A){
if (is.character(A) == TRUE, quote = FALSE){
my_cumsum = function(B){
if (typeof(B) == "character"){
return("Error")
}
else{
return(cumsum(B))
}
}
my_cumsum(c(1,2,3))
rmse = function(x,na_rm){
if ((is.numeric(x) != TRUE) & (any(is.na(x)))){
return("x must be a numeric vector")
}
else{
if (na_rm == TRUE){
x <- c(na.omit(x))
}
else{
return("Drop null values")
}
return(sqrt((sum(x^2))/length(x)))
}
}
rmse(c(1,2,3,NA),TRUE)
rmse(c(1,2,3,NA),FALSE)
describe_difference = function(X,Y){
x_len <- str_length(X)
y_len <- str_length(Y)
N <- abs(str_length(X) - str_length(Y))
Z <- c(str_length(X), str_length(Y))
if (x_len == y_len){
print("Your strings are the same length")
}
else{
print(paste("string",which.max(Z),"is longer by",N,"characters"))
}
}
describe_difference("trail__","?") #example
?%in%
?pivot_longer
libraries(tidyverse)
library(tidyverse)
View(relig_income)
df_religion <- relig_income%>%
pivot_longer(
cols = "religion",
names_to = "income"
values_to = "count"
df_religion <- relig_income%>%
pivot_longer(
cols = "religion",
names_to = "income"
values_to = "count"
# pivot
# pivot_longer
# pivot wider
df_religion <- relig_income%>%
pivot_longer(
cols = "religion",
names_to = "income"
values_to = "count"
# pivot
# pivot_longer
# pivot wider
df_religion <- relig_income%>%
pivot_longer(
cols = "religion",
names_to = "income",
values_to = "count"
)
df_religion <- relig_income%>%
pivot_longer(
cols = "religion",
names_to = "income",
value
rm(list = ls())
# install.packages('readstata13')
library('readstata13')
library('data.table')
library('tidyverse')
library('dplyr')
ab <- ("C:/Users/nahomw/Desktop/assignments/First Quarter/data_wrangling/project_U5M/HMS_520_FINAL_PROJECT/data/ETBR71FL.DTA")
df <- read.dta13(ab,generate.factors = TRUE)
View(df)
df_viz <- copy(df)
df <- setDT(df)
df_viz <- setDT(df_viz)
df <- df_viz
#################################################
# filter data for age <60 month old.packages
##############################################
df <- df[(b19 < 60)]
df_viz <- df_viz[(b19 < 60)]
df <- df[ ,.(region = v024, clust_no = v001, bir_int = b11, num_anc = m14, fac_del = m15, outcome = b5,type_res = v025, size_child = m18)]
View(df)
summary(df)
########################################
df_no <- df[outcome == 'no']
View(df_no)
####################################################
# we can see that a 357 anc-visit is missing for dead class
####################################################
df <- df[, -c("num_anc")]
########################################################
# REFACTOR DF
######################################################
### RENAME GROUP (convert to numerical variables)
#######################################################
temp <- df
X <- c(unique(temp$region))
temp$region <- factor(temp$region, levels = X, labels = c(1:c(length(X))))
temp$outcome <- factor(temp$outcome, levels = c('yes','no'), labels = c(0:1))
temp$type_res <- factor(temp$type_res, levels = c('urban','rural'), labels = c(0:1))
View(temp)
############################################################3
# Group then refactor
#############################################################
X <- unique(temp$fac_del)
X <- c('home',"respondent's home",'other home','public sector','government hospital',
'government health center','government health post',
'other public sector','private sector','private hospital','private clinic',
'other private sector','ngo','ngo: health facility','ngo: other health facility','other')
temp$fac_del <- factor(temp$fac_del, levels = c(X),
labels = c(0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1)
)
###########################################################################
# GROUP using cut for birth interval
#########################################################################
temp$bir_int <- cut(temp$bir_int, breaks = c(-Inf,24,Inf), labels = c(0,1), include.lowest = FALSE, an.rm = TRUE)
###########################################################################
# GROUP using cut for size-child
#########################################################################
temp1 <- temp
temp$size_child <- factor(temp$size_child, levels = c(unique(temp$size_child)),
labels = c(3,4,5,2,1,NA)
)
temp <- na.omit(temp)
temp <- temp[,c(1:4,6:7,5)]
View(temp)
write_csv(temp,"Prep_data.csv")
rm(list = ls())
# install.packages('readstata13')
library('readstata13')
library('data.table')
library('tidyverse')
library('dplyr')
df <- read_csv("C:/Users/nahomw/Desktop/assignments/First Quarter/data_wrangling/project_U5M/HMS_520_FINAL_PROJECT/data/Prep_data.csv")
setwd("C:/Users/nahomw/Desktop/assignments/First Quarter/data_wrangling/project_U5M/HMS_520_FINAL_PROJECT/data/ETBR71FL.DTA")
library('dplyr')
ab <- ("C:/Users/nahomw/Desktop/assignments/First Quarter/data_wrangling/project_U5M/HMS_520_FINAL_PROJECT/data/ETBR71FL.DTA")
setwd("C:/Users/nahomw/Desktop/assignments/First Quarter/data_wrangling/project_U5M/HMS_520_FINAL_PROJECT/data/ETBR71FL.DTA")
?setwd
setwd("C:/Users/nahomw/Desktop/assignments/First Quarter/data_wrangling/project_U5M/HMS_520_FINAL_PROJECT/data/Prep_dat.csv")
setwd("C:/Users/nahomw/Desktop/assignments/First Quarter/data_wrangling/project_U5M/HMS_520_FINAL_PROJECT/data/Prep_dat.csv")
setwd("C:/Users/nahomw/Desktop/assignments/First Quarter/data_wrangling/project_U5M/HMS_520_FINAL_PROJECT/data")
df <- read_csv("Prep_data.csv")
df <- read_csv("Prep_data.csv", header = TRUE)
df <- read.csv("Prep_data.csv")
View(df)
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- df(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
#Use 70% of dataset as training set and remaining 30% as testing set
View(df)
#Use 70% of dataset as training set and remaining 30% as testing set
sample(df,0.7)
?sample
nrow(df)
nrow(df*0.7)
nrow(df)*0.7
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
library('data.table')
df <- df[, ':=' (train = NA)]
df <- df[, := (train = NA)]
df <- df[,:= list(train = NA)]
df[, := list(train = NA)]
df[, ':=' list(train = NA)]
?:=
df[, train:= NA]
df[, train := NA]
#################################################
# MODEL BUILDING
#################################################
df <- setDF(df)
set.seed(1)
df[, train := NA]
df[, train := "outcome"]
df[,  `:=`(train = "outcome")]
df[,  `:=`("train" = outcome)]
#################################################
# MODEL BUILDING
#################################################
df <- setDF(df)
?:=
df[, "train" := outcome]
#################################################
# MODEL BUILDING
#################################################
df <- setDT(df)
set.seed(1)
df[, "train" := outcome]
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
df[, "train" := sample]
sample <- sample(c(1, 0), nrow(df), replace=TRUE, prob=c(0.7,0.3))
df[, "train" := sample]
View(df)
table(df$train)
names(df)
###############################################################
#   train model
##############################################################
model <- glm(outcome~region+bir_int+fac_del+type_res+size_child, family="binomial", data=df[train == 1])
summary(model)
model <- glm(outcome~region+bir_int+fac_del+type_res+size_child, family="binomial", data=df)
summary(model)
typeof(df$region)
###############################################################
#   train model
##############################################################
df$region <- as.factor(df$region)
model <- glm(outcome~region+bir_int+fac_del+type_res+size_child, family="binomial", data=df[train == 1])
model <- glm(outcome~region+bir_int+fac_del+type_res+size_child, family="binomial", data=df)
summary(model)
df$fac_del <- as.factor(df$fac_del)
df$type_res <- as.factor(df$type_res)
model <- glm(outcome~region+bir_int+fac_del+type_res+size_child, family="binomial", data=df)
summary(model)
as.factor()
?na.fill
?nafill
?na.fill
install.packages('rmarkdown')
---
title: "Under five mortatlity estimation in Ethiopia"
